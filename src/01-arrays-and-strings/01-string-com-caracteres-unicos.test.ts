import { describe, expect, it } from 'vitest'
import { hasUniqueCharsWithArray, hasUniqueCharsWithSet } from './01-string-com-caracteres-unicos'

describe('exercicio-01: Determina se uma string contÃ©m apenas caracteres Ãºnicos', () => {
  it.each(['', ' ', 'a', 'abc', '123', 'aAbB'])(
    'retorne true quando a string contÃ©m apenas caracteres Ãºnicos: [%s]',
    (inputString) => {
      expect(hasUniqueCharsWithSet(inputString)).toBe(true)
      expect(hasUniqueCharsWithArray(inputString)).toBe(true)
    },
  )

  it.each(['  ', 'aa', 'abab', '1213', 'abba', 'ğŸ˜ŠğŸ˜Š'])(
    'retorne false quando a string contÃ©m caracteres duplicados: [%s]',
    (inputString) => {
      expect(hasUniqueCharsWithSet(inputString)).toBe(false)
      expect(hasUniqueCharsWithArray(inputString)).toBe(false)
    },
  )

  it.fails(
    'a abordagem com array falha para caracteres Unicode que compartilham o mesmo surrogate code unit',
    () => {
      /**
       * Estes emojis sÃ£o diferentes, mas 'ğŸ˜Š'.charCodeAt(0) === 'ğŸ˜‚'.charCodeAt(0)
       * A funÃ§Ã£o com array irÃ¡ incorretamente identificar uma duplicata.
       * Este teste Ã© marcado com .fails() para indicar que a falha Ã© esperada.
       */
      const unicodeString = 'ğŸ˜ŠğŸ˜‚'
      expect(hasUniqueCharsWithArray(unicodeString)).toBe(true)
    },
  )
})
